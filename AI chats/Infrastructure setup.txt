Question:
Using this doc link - https://stripe.com/docs/stripe-js/react prepare everything for the proper work with ReactStripeJS

Answer:
I'm sorry for any confusion, but as an AI model developed by OpenAI, I am currently not able to access external internet resources or view web pages, including the document link you've provided. I can however provide general guidance on how you can integrate Stripe with a React application based on my training data.

Here is a basic step-by-step guide on how you can implement Stripe in your React application:

1. **Install Stripe React Library**: First, you need to install the Stripe React library. You can do this by running the following command in your terminal:

   ```bash
   npm install @stripe/stripe-js @stripe/react-stripe-js
   ```

2. **Setup Stripe Provider**: Next, wrap your application in the `Elements` provider from `@stripe/react-stripe-js`. The `Elements` provider allows you to use the hooks and components provided by the library. Your code might look something like this:

   ```jsx
   import {Elements} from '@stripe/react-stripe-js';
   import {loadStripe} from '@stripe/stripe-js';

   const stripePromise = loadStripe('your-public-key');

   function App() {
     return (
       <Elements stripe={stripePromise}>
         {/* Your app code goes here */}
       </Elements>
     );
   }

   export default App;
   ```

   Replace 'your-public-key' with your Stripe publishable key.

3. **Create a Payment Form**: To collect card details, you can use the `CardElement` component from `@stripe/react-stripe-js`.

   ```jsx
   import {CardElement, useStripe, useElements} from '@stripe/react-stripe-js';

   const CheckoutForm = () => {
     const stripe = useStripe();
     const elements = useElements();

     const handleSubmit = async (event) => {
       event.preventDefault();

       if (!stripe || !elements) {
         return;
       }

       const card = elements.getElement(CardElement);
       const result = await stripe.createToken(card);

       if (result.error) {
         console.log(result.error.message);
       } else {
         console.log(result.token);
       }
     };

     return (
       <form onSubmit={handleSubmit}>
         <CardElement />
         <button type="submit" disabled={!stripe}>Pay</button>
       </form>
     );
   };
   ```

4. **Handle Server-Side Logic**: Stripe requires you to confirm and handle payments server-side. After obtaining the token from the `createToken` method, you would send it to your server and use it to create a charge or perform any other operation that you would like.

Please make sure to replace the `'your-public-key'` with your actual public API key from your Stripe account. Always remember to keep your private API keys secret and never expose them in client-side code. You also need to handle errors and edge cases to make sure your integration is robust and user-friendly.

Question:
Write down server side logic

Answer:
For the server-side part, you will need to use the Stripe Node.js library. You'll have to install it in your backend Node.js project:

```bash
npm install stripe
```

Here is a simple example of a Node.js Express app that takes the token created on the client-side, and then makes a charge with Stripe:

```javascript
const express = require('express');
const stripe = require('stripe')('your-secret-key');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(cors());

app.post('/payment', async (req, res) => {
    try {
        let {amount, id} = req.body;
        const payment = await stripe.paymentIntents.create({
            amount,
            currency: 'USD',
            description: 'Your Company Description',
            payment_method: id,
            confirm: true
        });

        console.log("Payment", payment);
        res.json({
            message: 'Payment successful',
            success: true
        });
    } catch (error) {
        console.log("Error", error);
        res.json({
            message: 'Payment failed',
            success: false
        });
    }
});

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
    console.log(`Server started on port ${PORT}`);
});
```

In this code:

- `app.post('/payment', async (req, res) => {...}` sets up a POST route at '/payment' that will handle the payment process.
- `let {amount, id} = req.body;` receives the amount and the token id from the request body.
- `stripe.paymentIntents.create({...})` creates a payment intent with Stripe.
- We pass the amount, currency, description, the payment method ID (the token), and we tell it to confirm immediately.

Don't forget to replace `'your-secret-key'` with your Stripe secret key.

This server listens on port 5000 for incoming requests. Your client-side app would send requests to `http://localhost:5000/payment` to start the payment process.

Please note that this is a very simple example, and real-world applications require more complex error handling, user authentication, and potentially other business logic. It's also important to secure your application appropriately, as you'll be handling sensitive user information. Make sure you follow best practices for security.